{"app": "common",
 "inst": [
  {"pkg": "Polymake::common::Set"},
  {"class": "Set<int>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Int"},
  {"args": ["Set<int>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "int"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"class": "Set<Array<int>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Array__Int"},
  {"class": "Set<std::pair<Set<int>, Set<int>>>", "include": ["polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Int_I_Set__Int_Z"},
  {"class": "Set<Array<Set<int>>>", "include": ["polymake/Array.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Array__Set__Int"},
  {"class": "Set<Set<int>>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Set__Int"},
  {"args": ["Set<Set<int>>", "perl::Canned<const Array<Set<int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<Set<int>>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Set<int>>&>", "perl::Canned<const Set<Set<int>>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::AnchorArg<perl::Canned<Set<int>>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"class": "Set<Polynomial<QuadraticExtension<Rational>, int>>", "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Polynomial_A_QuadraticExtension__Rational_I_Int_Z"},
  {"class": "Set<Set<Set<int>>>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__Set__Set__Int"},
  {"class": "Set<Matrix<int>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Int_I_NonSymmetric_Z"},
  {"class": "Set<SparseVector<Rational>>", "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "pkg": "Polymake::common::Set__SparseVector__Rational"},
  {"class": "Set<Polynomial<Rational, int>>", "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Polynomial_A_Rational_I_Int_Z"},
  {"class": "Set<Vector<Rational>>", "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Rational"},
  {"class": "Set<Matrix<Rational>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Rational_I_NonSymmetric_Z"},
  {"class": "Set<Vector<int>>", "include": ["polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Int"},
  {"class": "Set<std::pair<Set<int>, Set<Set<int>>>>", "include": ["polymake/Set.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Int_I_Set__Set__Int_Z"},
  {"class": "Set<Matrix<QuadraticExtension<Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_QuadraticExtension__Rational_I_NonSymmetric_Z"},
  {"args": ["Set<Polynomial<QuadraticExtension<Rational>, int>>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Polynomial<QuadraticExtension<Rational>, int>>&>", "perl::Canned<const Polynomial<QuadraticExtension<Rational>, int>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Polynomial<Rational, int>>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Polynomial<Rational, int>>&>", "perl::Canned<const Polynomial<Rational, int>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Polynomial<QuadraticExtension<Rational>, int>>&>", "perl::Canned<const Set<Polynomial<QuadraticExtension<Rational>, int>>&>"], "include": ["polymake/Polynomial.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Polynomial<Rational, int>>&>", "perl::Canned<const Set<Polynomial<Rational, int>>&>"], "include": ["polymake/Polynomial.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Set<Matrix<Rational>>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Matrix<Rational>>&>", "perl::Canned<const Set<Matrix<Rational>>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["Set<SparseVector<Rational>>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Vector<Rational>>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Set<Set<int>>>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Set<std::pair<Set<int>, Set<Set<int>>>>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Vector<int>>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Array<int>>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["Set<Matrix<int>>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<SparseVector<Rational>>&>", "perl::Canned<const Set<SparseVector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Set<Set<int>>>&>", "perl::Canned<const Set<Set<Set<int>>>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<int>, Set<Set<int>>>>&>", "perl::Canned<const Set<std::pair<Set<int>, Set<Set<int>>>>&>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Array<int>>&>", "perl::Canned<const Set<Array<int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<int>>&>", "perl::Canned<const Set<Vector<int>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<Matrix<int>>&>", "perl::Canned<const Set<Matrix<int>>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<int, true>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["Set<Set<int>>", "perl::Canned<const Array<Set<int>>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Set<int>", "perl::Canned<const pm::Series<int, true>&>"], "include": ["polymake/Set.h"], "op": "convert", "ret": "empty", "sig": "convert:O"},
  {"args": ["Set<int>", "perl::Canned<const pm::Indices<pm::sparse_matrix_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::Rational, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&, pm::NonSymmetric> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseMatrix.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::AnchorArg<perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>>"], "include": ["polymake/IncidenceMatrix.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["Set<Set<int>>", "perl::Canned<const pm::iterator_range<pm::ptr_wrapper<pm::Set<int, pm::operations::cmp> const, false> >&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"class": "Set<Vector<double>>", "include": ["polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Float"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<int>&>", "int"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Vector<Rational>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::AnchorArg<perl::Canned<const Set<int>&>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["Set<int>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const Set<int>&>", "int"], "func": "exists", "include": ["polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const pm::Series<int, true>&>"], "include": ["polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)2>, false, (pm::sparse2d::restriction_kind)2> > >", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<int>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "int"], "func": "exists", "include": ["polymake/IncidenceMatrix.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const pm::Series<int, true>&>", "perl::Canned<const pm::Indices<pm::SparseVector<pm::PuiseuxFraction<pm::Min, pm::Rational, pm::Rational> > const&>&>"], "include": ["polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h", "polymake/TropicalNumber.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<int, true>&>", "perl::Canned<const pm::Indices<pm::SparseVector<pm::Rational> const&>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/SparseVector.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["Set<std::pair<Set<int>, Set<int>>>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Set<int>>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<int>", "perl::Canned<const pm::SingleElementSetCmp<int, pm::operations::cmp>&>"], "include": ["polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["perl::AnchorArg<perl::Canned<pm::SingleElementSetCmp<int, pm::operations::cmp>>>"], "include": ["polymake/Set.h"], "op": "com", "sig": "com:O.X11"},
  {"args": ["perl::Canned<pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "int"], "include": ["polymake/IncidenceMatrix.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<int>", "perl::Canned<const pm::Series<int, true>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<int>", "perl::Canned<const Array<int>&>"], "include": ["polymake/Array.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["Set<int>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::Series<int, true>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<Vector<double>>"], "include": ["polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<Set<Vector<double>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<double>&>, pm::Series<int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Vector<double>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<double> const&>, pm::Series<int, true> const, mlist<> >&>"], "func": "exists", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h", "polymake/Vector.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational>&>, pm::Series<int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational> const&>, pm::Series<int, true> const, mlist<> >&>"], "func": "exists", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const pm::Series<int, true>&>", "perl::Canned<const pm::Series<int, true>&>"], "include": ["polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<int>, Set<int>>>&>", "perl::Canned<const Set<std::pair<Set<int>, Set<int>>>&>"], "include": ["polymake/Set.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"class": "Set<std::string>", "include": ["polymake/Set.h"], "pkg": "Polymake::common::Set__String"},
  {"class": "Set<Vector<Integer>>", "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "pkg": "Polymake::common::Set__Vector__Integer"},
  {"args": ["Set<Vector<Integer>>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<Vector<Integer>>&>", "perl::Canned<const Set<Vector<Integer>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<Vector<Integer>>&>", "perl::Canned<const Set<Vector<Integer>>&>"], "include": ["polymake/Integer.h", "polymake/Set.h", "polymake/Vector.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<Set<int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<std::string>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<std::string>&>", "std::string"], "include": ["polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<std::string>&>", "std::string"], "func": "exists", "include": ["polymake/Set.h"], "kind": "meth", "sig": "exists:CORE.M.X"},
  {"class": "Set<Matrix<PuiseuxFraction<Min, Rational, Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Set__Matrix_A_PuiseuxFraction_A_Min_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Set<Matrix<PuiseuxFraction<Max, Rational, Rational>>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/PuiseuxFraction.h", "polymake/Rational.h", "polymake/Set.h", "polymake/TropicalNumber.h"], "pkg": "Polymake::common::Set__Matrix_A_PuiseuxFraction_A_Max_I_Rational_I_Rational_Z_I_NonSymmetric_Z"},
  {"class": "Set<Matrix<double>>", "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Set.h"], "pkg": "Polymake::common::Set__Matrix_A_Float_I_NonSymmetric_Z"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["Set<Set<int>>", "perl::Canned<const pm::Rows<pm::IncidenceMatrix<pm::NonSymmetric> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["Set<Set<int>>", "perl::Canned<const Set<Set<int>>&>"], "include": ["polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<Set<int>>&>", "perl::Canned<const Set<Set<int>>&>"], "include": ["polymake/Set.h"], "op": "Sub", "ret": "lvalue", "sig": "Sub:O.X1.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::Rational> const&>, pm::Series<int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["Set<Vector<Rational>>", "perl::Canned<const Set<Vector<Rational>>&>"], "include": ["polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<Set<Vector<Rational>>&>", "perl::Canned<const pm::IndexedSlice<pm::masquerade<pm::ConcatRows, pm::Matrix_base<pm::QuadraticExtension<pm::Rational> > const&>, pm::Series<int, true> const, mlist<> >&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Matrix.h", "polymake/QuadraticExtension.h", "polymake/Rational.h", "polymake/Set.h", "polymake/Vector.h"], "op": "Add", "ret": "lvalue", "sig": "Add:O.X1.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Set<int>", "perl::Canned<const pm::PointedSubset<pm::Series<int, true> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "assign", "ret": "empty", "sig": "assign:O"},
  {"args": ["Set<int>", "perl::Canned<const pm::PointedSubset<pm::Series<int, true> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["Set<int>", "perl::Canned<const pm::PointedSubset<pm::Set<int, pm::operations::cmp> >&>"], "include": ["polymake/PowerSet.h", "polymake/Set.h"], "op": "new", "sig": "new.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "add", "sig": "add:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const Set<int>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "sub", "sig": "sub:O.X.X"},
  {"args": ["perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> > const&>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, true, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"args": ["perl::Canned<const Set<int>&>", "perl::Canned<const pm::incidence_line<pm::AVL::tree<pm::sparse2d::traits<pm::sparse2d::traits_base<pm::nothing, false, false, (pm::sparse2d::restriction_kind)0>, false, (pm::sparse2d::restriction_kind)0> >&>&>"], "include": ["polymake/IncidenceMatrix.h", "polymake/Set.h"], "op": "mul", "sig": "mul:O.X.X"},
  {"class": "Set<std::pair<Set<Set<int>>, Vector<int>>>", "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Set__Int_I_Vector__Int_Z"},
  {"class": "Set<std::pair<Set<Set<int>>, std::pair<Vector<int>, Vector<int>>>>", "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "pkg": "Polymake::common::Set__Pair_A_Set__Set__Int_I_Pair_A_Vector__Int_I_Vector__Int_Z_Z"},
  {"args": ["Set<std::pair<Set<Set<int>>, Vector<int>>>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["Set<std::pair<Set<Set<int>>, std::pair<Vector<int>, Vector<int>>>>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "new", "sig": "new"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Set<int>>, Vector<int>>>&>", "perl::Canned<const Set<std::pair<Set<Set<int>>, Vector<int>>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
  {"args": ["perl::Canned<const Set<std::pair<Set<Set<int>>, std::pair<Vector<int>, Vector<int>>>>&>", "perl::Canned<const Set<std::pair<Set<Set<int>>, std::pair<Vector<int>, Vector<int>>>>&>"], "include": ["polymake/Set.h", "polymake/Vector.h", "polymake/client.h"], "op": "_eq", "sig": "_eq:O.X.X"},
 null ],
"version": 3}
